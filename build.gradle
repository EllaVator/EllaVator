plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
}

allprojects {
    apply plugin: 'groovy'

    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

evaluationDependsOn ':prompts'

mainClassName = 'OpenDialDemo'

repositories {
    mavenLocal()
    flatDir {
        dirs 'opendial/lib'
    }
    jcenter()
    maven {
        url 'http://oss.jfrog.org/artifactory/repo'
    }
}

dependencies {
    compile group: 'de.dfki.mary', name: 'voice-cmu-slt-hsmm', version: '5.1.1'
    compile project(':sphinx4:sphinx4-core')
    compile project(':opendial')
    testCompile localGroovy()
    testCompile group: 'org.testng', name: 'testng', version: '6.8.21'
    compile group: 'org.rxtx', name: 'rxtx', version: '2.1.7'
}

project(':pi4j') {
    task install(type: Exec) {
        executable 'mvn'
        args 'install'
    }
}

project(':sphinx4:sphinx4-core') {
    repositories {
        jcenter()
    }

    dependencies {
        compile group: 'org.apache.commons', name: 'commons-math3', version: '3.2'
        compile project(':sphinx4:sphinx4-data')
        testCompile group: 'org.testng', name: 'testng', version: '6.8.8'
        testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    }
}

task expandGrammarEnglish {
    dependsOn classes
    def grammarFile = file("$sourceSets.main.output.resourcesDir/grammar_en.gram")
    def textFile = file("$sourceSets.main.output.resourcesDir/grammar_en_sample.txt")
    inputs.files grammarFile
    outputs.files textFile
    doLast {
        javaexec {
            main 'JsgfExpander'
            classpath sourceSets.main.runtimeClasspath
            args = [grammarFile.parent, grammarFile.name, true, textFile]
        }
    }
    processTestResources.dependsOn it
}

task expandGrammarGerman {
    dependsOn classes
    def grammarFile = file("$sourceSets.main.output.resourcesDir/grammar_de.gram")
    def textFile = file("$sourceSets.main.output.resourcesDir/grammar_de_sample.txt")
    inputs.files grammarFile
    outputs.files textFile
    doLast {
        javaexec {
            main 'JsgfExpander'
            classpath sourceSets.main.runtimeClasspath
            args = [grammarFile.parent, grammarFile.name, true, textFile]
        }
    }
}

task copySettingsXml(type: Copy) {
    from project(':opendial').sourceSets.main.output.resourcesDir
    into "$buildDir/resources"
    include 'settings.xml'
}

processResources {
    from project(':sphinx4:sphinx4-data').sourceSets.main.output.resourcesDir
}

run {
    dependsOn copySettingsXml
    workingDir = buildDir
}

jar {
    manifest {
        attributes('Main-Class': project.mainClassName)
    }
}

shadowJar {
    classifier = ''
    mergeServiceFiles()
}

test {
    dependsOn project(':prompts').extractAudio
    useTestNG()
    testLogging {
        exceptionFormat = 'full'
    }
    systemProperty 'audioDir', project(':prompts').sourceSets.data.output.resourcesDir
}
