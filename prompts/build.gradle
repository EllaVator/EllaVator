import groovy.io.FileType
import groovy.json.JsonSlurper

repositories {
    ivy {
        url 'http://www.coli.uni-saarland.de/courses/elevator15/audio'
        layout 'pattern', {
            artifact '[module]_[classifier].[ext]'
        }
    }
}

configurations {
    data
}

dependencies {
    data name: 'alexander', classifier: 'close_16', ext: 'flac'
    data name: 'anne', classifier: 'close_16', ext: 'flac'
    data name: 'bryan', classifier: 'close_16', ext: 'flac'
    data name: 'kata', classifier: 'close_16', ext: 'flac'
    data name: 'laura', classifier: 'close_16', ext: 'flac'
    data name: 'pavel', classifier: 'close_16', ext: 'flac'
}

sourceSets {
    text
    data
}

task getAudio(type: Copy) {
    from configurations.data
    into sourceSets.data.output.resourcesDir
    rename ~/\-*close_16/, ''
    processDataResources.dependsOn it
}

task generatePromptList {
    inputs.files processTextResources
    def texFile = file("$sourceSets.text.output.resourcesDir/prompts.tex")
    outputs.files texFile
    doLast {
        texFile.withWriter { tex ->
            tex.println "\\documentclass[aspectratio=169]{beamer}"
            tex.println "\\usepackage[utf8]{inputenc}"
            tex.println "\\beamertemplatenavigationsymbolsempty"
            tex.println "\\setbeamertemplate{footline}[frame number]"
            tex.println "\\newcommand*{\\prompt}[1]{%"
            tex.println "  \\frame{\\Huge\\centering #1}"
            tex.println "}"
            tex.println "\\begin{document}"
            inputs.files.each { dir ->
                dir.eachFile { file ->
                    file.eachLine { line ->
                        tex.println "\\prompt{$line}"
                    }
                }
            }
            tex.println "\\end{document}"
        }
    }
}

task compilePromptList(type: Exec) {
    inputs.files generatePromptList
    outputs.files "$buildDir/prompts.pdf"
    executable 'latexmk'
    doFirst {
        args '-pdf', "-output-directory=$temporaryDir", '-quiet', inputs.files.singleFile
    }
    doLast {
        copy {
            from temporaryDir
            into buildDir
            include 'prompts.pdf'
        }
    }
}

task convertTextGridsToJson {
    def textGridFiles = fileTree(sourceSets.data.output.resourcesDir).include('*.TextGrid').files
    def praatScript = 'src/data/praat/TextGrid2JSON.praat'
    inputs.files processDataResources, praatScript
    outputs.files textGridFiles.collect { it.path - 'TextGrid' + 'json' }
    doLast {
        textGridFiles.each { textGridFile ->
            def jsonFileName = textGridFile.path - 'TextGrid' + 'json'
            exec {
                commandLine "praat $praatScript $textGridFile $jsonFileName".tokenize()
            }
        }
    }
}

task extractAudio {
    inputs.files processDataResources
    dependsOn convertTextGridsToJson

    doLast {
        inputs.files.each { dir ->
            dir.eachFile { jsonFile ->
                if (jsonFile.name.endsWith('.json')) {
                    def speaker = jsonFile.name - '.json'
                    def flacFile = file("$dir/${speaker}.flac")
                    if (flacFile.exists()) {
                        new JsonSlurper().parse(jsonFile).each { prompt ->
                            exec {
                                commandLine "sox $flacFile.path ${speaker}_${prompt.prompt}.wav trim $prompt.start =$prompt.end".tokenize()
                                workingDir dir
                            }
                            file("$dir/${speaker}_${prompt.prompt}.txt").text = prompt.text
                        }
                    }
                }
            }
        }

    }
}